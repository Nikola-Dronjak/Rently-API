package com.nikoladronjak.rently.domain;

import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import jakarta.persistence.*;
import jakarta.validation.constraints.*;

/**
 * Represents a domain class for storing information about a Customer entity.
 * This class is mapped to the "Customers" table in the database using JPA
 * annotations. The primary key of this table is "customerId".
 * 
 * The Customer entity contains a customerId, a first name, a last name, an
 * email address, a password and a list of leases associated with the Customer
 * entity.
 * 
 * @author Nikola Dronjak
 */
@Entity
@Table(name = "Customers")
public class Customer {

	/**
	 * Represents a unique identifier for the customer (int). This identifier is
	 * automatically generated by JPA.
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int customerId;

	/**
	 * Represents the first name of the customer (String).
	 * 
	 * The first name cannot be null and it has to have at least 2 characters.
	 */
	@NotBlank(message = "The first name of the customer is required.")
	@Size(min = 2, message = "The first name of the customer has to have at least 2 characters.")
	private String firstName;

	/**
	 * Represents the last name of the customer (String).
	 * 
	 * The last name cannot be null and it has to have at least 2 characters.
	 */
	@NotBlank(message = "The last name of the customer is required.")
	@Size(min = 2, message = "The last name of the customer has to have at least 2 characters.")
	private String lastName;

	/**
	 * Represents the email address of the customer (String). The email address has
	 * to be unique.
	 * 
	 * The email address cannot be null and it has to be a valid email address.
	 */
	@NotBlank(message = "The email address of the customer is required.")
	@Email(message = "The email address of the customer must be valid.")
	@Column(unique = true)
	private String email;

	/**
	 * Represents the password of the customer (String).
	 * 
	 * The password cannot be null and it has to have at least 5 characters.
	 */
	@NotBlank(message = "The password of the customer is required.")
	@Size(min = 5, message = "The password of the customer has to have at least 5 characters.")
	private String password;

	/**
	 * Represents the list of leases with which the customer is associated
	 * (List&lt;Lease&gt;).
	 */
	@OneToMany(mappedBy = "customer", fetch = FetchType.EAGER)
	private List<Lease> leases;

	public Customer() {

	}

	public Customer(int customerId, String firstName, String lastName, String email, String password,
			List<Lease> leases) {
		this.customerId = customerId;
		this.firstName = firstName;
		this.lastName = lastName;
		this.email = email;
		this.password = password;
		this.leases = leases;
	}

	public int getCustomerId() {
		return customerId;
	}

	public void setCustomerId(int customerId) {
		this.customerId = customerId;
	}

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public List<Lease> getLeases() {
		return leases;
	}

	public void setLeases(List<Lease> leases) {
		this.leases = leases;
	}

	@Override
	public String toString() {
		return "Customer [customerId=" + customerId + ", firstName=" + firstName + ", lastName=" + lastName + ", email="
				+ email + ", password=" + password + ", leases="
				+ leases.stream().map(Lease::toString).collect(Collectors.joining(", ")) + "]";
	}

	@Override
	public int hashCode() {
		return Objects.hash(customerId, email, firstName, lastName, leases, password);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Customer other = (Customer) obj;
		return customerId == other.customerId && Objects.equals(email, other.email)
				&& Objects.equals(firstName, other.firstName) && Objects.equals(lastName, other.lastName)
				&& Objects.equals(leases, other.leases) && Objects.equals(password, other.password);
	}
}
