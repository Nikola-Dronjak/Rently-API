package com.nikoladronjak.rently.domain;

import java.util.List;
import java.util.Objects;

import jakarta.persistence.*;

/**
 * Represents a domain class for storing information about a UtilityLease
 * entity. This class is mapped to the "UtilityLeases" table in the database
 * using JPA annotations. The primary key of this table is "utilityLeaseId".
 * This table also contains two foreign keys, "propertyId" which references the
 * "Properties" table and "utilityId" which references the "Utilities" table.
 * 
 * The UtilityLease entity contains a utilityLeaseId, a monthly rental rate, a
 * utility associated with the UtilityLease entity, a property associated with
 * the UtilityLease entity and a list of rents which are associated with the
 * UtilityLease entity.
 * 
 * The combination of utilityId and preopertyId values has to be unique.
 * 
 * @author Nikola Dronjak
 */
@Entity
@Table(name = "UtilityLeases", uniqueConstraints = { @UniqueConstraint(columnNames = { "utilityId", "propertyId" }) })
public class UtilityLease {

	/**
	 * Represents a unique identifier for the utility lease (int). This identifier
	 * is automatically generated by JPA.
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int utilityLeaseId;

	/**
	 * Represents the monthly rental rate of the utility lease (double).
	 */
	private double rentalRate;

	/**
	 * Represents the utility that is associated with the utility lease (Utility).
	 */
	@ManyToOne
	@JoinColumn(name = "utilityId")
	private Utility utility;

	/**
	 * Represents the property that is associated with the utility lease (Property).
	 */
	@ManyToOne
	@JoinColumn(name = "propertyId")
	private Property property;

	/**
	 * Represents the list of rents with which the utility leases are associated
	 * (List&lt;Rent&gt;).
	 * 
	 * This annotation creates an association table called "UtilityLeasesRents".
	 * This table contains two columns:
	 * <ul>
	 * <li>rentId - The id of the rent associated with the utility lease.</li>
	 * <li>utilityLeaseId - The id of the utility lease associated with the
	 * rent.</li>
	 * </ul>
	 */
	@ManyToMany
	private List<Rent> rents;

	public UtilityLease() {

	}

	public UtilityLease(int utilityLeaseId, double rentalRate, Utility utility, Property property, List<Rent> rents) {
		this.utilityLeaseId = utilityLeaseId;
		this.rentalRate = rentalRate;
		this.utility = utility;
		this.property = property;
		this.rents = rents;
	}

	public int getUtilityLeaseId() {
		return utilityLeaseId;
	}

	public void setUtilityLeaseId(int utilityLeaseId) {
		this.utilityLeaseId = utilityLeaseId;
	}

	public double getRentalRate() {
		return rentalRate;
	}

	public void setRentalRate(double rentalRate) {
		this.rentalRate = rentalRate;
	}

	public Utility getUtility() {
		return utility;
	}

	public void setUtility(Utility utility) {
		this.utility = utility;
	}

	public Property getProperty() {
		return property;
	}

	public void setProperty(Property property) {
		this.property = property;
	}

	public List<Rent> getRents() {
		return rents;
	}

	public void setRents(List<Rent> rents) {
		this.rents = rents;
	}

	@Override
	public String toString() {
		return "UtilityLease [utilityLeaseId=" + utilityLeaseId + ", rentalRate=" + rentalRate + ", utility=" + utility
				+ ", property=" + property + ", rents=" + rents + "]";
	}

	@Override
	public int hashCode() {
		return Objects.hash(property, rentalRate, rents, utility, utilityLeaseId);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		UtilityLease other = (UtilityLease) obj;
		return Objects.equals(property, other.property)
				&& Double.doubleToLongBits(rentalRate) == Double.doubleToLongBits(other.rentalRate)
				&& Objects.equals(rents, other.rents) && Objects.equals(utility, other.utility)
				&& utilityLeaseId == other.utilityLeaseId;
	}
}
