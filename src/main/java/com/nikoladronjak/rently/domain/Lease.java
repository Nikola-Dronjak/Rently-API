package com.nikoladronjak.rently.domain;

import java.util.GregorianCalendar;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import jakarta.persistence.*;

/**
 * Represents a domain class for storing information about a Lease entity. This
 * class is mapped to the "Leases" table in the database using JPA annotations.
 * The primary key of this table is "leaseId". This table also contains two
 * foreign keys, "propertyId" which references the "Properties" table and
 * "customerId" which references the "Customers" table.
 * 
 * The Lease entity contains a leaseId, a monthly rental rate, a start date for
 * the lease, an end date of the lease, a property which is associated with the
 * Lease entity, a customer who is associated with the Lease entity and a list
 * of rents which are associated with the Lease entity.
 * 
 * The combination of propertyId and customerId values has to be unique.
 * 
 * @author Nikola Dronjak
 */
@Entity
@Table(name = "Leases", uniqueConstraints = { @UniqueConstraint(columnNames = { "propertyId", "customerId" }) })
public class Lease {

	/**
	 * Represents a unique identifier for the lease (int).This identifier is
	 * automatically generated by JPA.
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int leaseId;

	/**
	 * Represents the monthly rental rate of the lease (double). This field is
	 * closely related to the rentalRate field in the Property class.
	 */
	private double rentalRate;

	/**
	 * Represents the start date of the lease (GergorianCalendar).
	 */
	private GregorianCalendar startDate;

	/**
	 * Represents the end date of the lease (GergorianCalendar).
	 */
	private GregorianCalendar endDate;

	/**
	 * Represents the property which is associated with the lease (Property).
	 */
	@ManyToOne
	@JoinColumn(name = "propertyId")
	private Property property;

	/**
	 * Represents the customer who is associated with the lease (Customer).
	 */
	@ManyToOne
	@JoinColumn(name = "customerId")
	private Customer customer;

	/**
	 * Represents the list of rents with which the lease is associated
	 * (List&lt;Rent&gt;).
	 */
	@OneToMany(mappedBy = "lease")
	private List<Rent> rents;

	public Lease() {

	}

	public Lease(int leaseId, double rentalRate, GregorianCalendar startDate, GregorianCalendar endDate,
			Property property, Customer customer, List<Rent> rents) {
		this.leaseId = leaseId;
		this.rentalRate = rentalRate;
		this.startDate = startDate;
		this.endDate = endDate;
		this.property = property;
		this.customer = customer;
		this.rents = rents;
	}

	public int getLeaseId() {
		return leaseId;
	}

	public void setLeaseId(int leaseId) {
		this.leaseId = leaseId;
	}

	public double getRentalRate() {
		return rentalRate;
	}

	public void setRentalRate(double rentalRate) {
		this.rentalRate = rentalRate;
	}

	public GregorianCalendar getStartDate() {
		return startDate;
	}

	public void setStartDate(GregorianCalendar startDate) {
		this.startDate = startDate;
	}

	public GregorianCalendar getEndDate() {
		return endDate;
	}

	public void setEndDate(GregorianCalendar endDate) {
		this.endDate = endDate;
	}

	public Property getProperty() {
		return property;
	}

	public void setProperty(Property property) {
		this.property = property;
	}

	public Customer getCustomer() {
		return customer;
	}

	public void setCustomer(Customer customer) {
		this.customer = customer;
	}

	public List<Rent> getRents() {
		return rents;
	}

	public void setRents(List<Rent> rents) {
		this.rents = rents;
	}

	@Override
	public String toString() {
		return "Lease [leaseId=" + leaseId + ", rentalRate=" + rentalRate + ", startDate=" + startDate + ", endDate="
				+ endDate + ", property=" + property + ", customer=" + customer + ", rents="
				+ rents.stream().map(Rent::toString).collect(Collectors.joining(", ")) + "]";
	}

	@Override
	public int hashCode() {
		return Objects.hash(customer, endDate, leaseId, property, rentalRate, rents, startDate);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Lease other = (Lease) obj;
		return Objects.equals(customer, other.customer) && Objects.equals(endDate, other.endDate)
				&& leaseId == other.leaseId && Objects.equals(property, other.property)
				&& Double.doubleToLongBits(rentalRate) == Double.doubleToLongBits(other.rentalRate)
				&& Objects.equals(rents, other.rents) && Objects.equals(startDate, other.startDate);
	}
}
